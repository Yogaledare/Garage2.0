@model Garage2._0.Models.SummaryViewModel

@{
    ViewData["Title"] = "Summary";
}
@{
    List<int> usedSpots = new List<int>();
    IEnumerable<Vehicle> currentVehicleinList = Model.Vehicles;
    foreach(var v in currentVehicleinList)
    {
        if (v.ParkingSpot != null)
        {
            usedSpots.Add(v.ParkingSpot.Spot);
        }
    }
    int availbleSpots = 100 - Model.Spots.Count;
}
<h1>Parking Lot</h1>

<div>Current amount avaliable empty spots: @availbleSpots</div>
<div>
    <table class="table">
        <thead>
            <tr>
                <th>
                    License Plate
                </th>
                <th>
                    VehicleType
                </th>
                <th>
                    Arrived Time
                </th>
                <th>
                    Duration
                </th>
                <th>
                    Spot
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Vehicles)
            {

                var totalhours = (DateTime.Now - item.ArrivalTime).TotalHours;

                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.LicensePlate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.VehicleType)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ArrivalTime)
                    </td>
                    <td>
                        @Math.Round(totalhours) hours
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ParkingSpot.Spot)
                    </td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.VehicleId">Edit</a> |
                        <a asp-action="Details" asp-route-id="@item.VehicleId">Details</a> |
                        <a asp-action="Delete" asp-route-id="@item.VehicleId">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

</div>
<div>
    <div class="container mt-3">
        <table class="table table-bordered">
            <tbody>
                @for (int row = 0; row <= 10; row++)
                {
                    <tr>
                        @for (int col = 0; col < 10; col++)
                        {
                            int index = row * 10 + col + 1;
                            if (usedSpots.Contains(index))
                            {
                                <td class=" bg-danger">
                                    X
                                </td>
                            }
                            else
                            {
                                <td class="bg-success">
                                    O
                                </td>
                            }
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>